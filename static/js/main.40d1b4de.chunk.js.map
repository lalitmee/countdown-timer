{"version":3,"sources":["utils/helper.js","components/CountDown/Column.js","components/LapsModal/Table/index.js","components/LapsModal/index.js","utils/constants.js","containers/CountDown/index.js","components/Instructions/index.js","App.js","utils/theme.js","serviceWorker.js","index.js"],"names":["getPaddedNumberWithZero","number","paddedNumber","String","padStart","formatTime","time","hours","Math","floor","minutes","seconds","miliseconds","setTimeInLocalStorage","localStorage","setItem","CountDownColumn","countDownTime","columnType","onChangeCountDownTime","isRunning","value","useMemo","Box","display","flexDirection","justifyContent","alignItems","minWidth","m","my","Typography","variant","charAt","toUpperCase","slice","Button","color","disabled","onClick","changeType","fontSize","useStyles","makeStyles","theme","paper","tableContainer","maxHeight","tableHeader","fontWeight","tableCellHead","backgroundColor","palette","grey","tableFooter","width","tableRow","action","hover","LapsModalTable","laps","showPagination","styles","useState","page","setPage","rowsPerPage","setRowsPerPage","lapsList","Paper","className","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","isEmpty","map","lap","index","lapStartTime","lapEndTime","lapDuration","key","component","scope","isNaN","TablePagination","rowsPerPageOptions","count","length","onChangePage","_","newPage","onChangeRowsPerPage","event","target","LapsModal","open","handleClose","Dialog","maxWidth","onClose","DialogTitle","DialogContent","dividers","DialogActions","mx","size","THEME_COLORS","PRIMARY_LIGHT","PRIMARY","PRIMARY_DARK","SECONDARY","BACKGROUND_COLOR","BACKGROUND_WHITE","NOTE_TEXT_GRAY","MAIN_NAV_BUTTON","ACTIVE","INACTIVE","BLACK","globalConstants","gridItemRoot","padding","spacing","iconRoot","from","opacity","to","CountDown","useSnackbar","enqueueSnackbar","closeSnackbar","setCountDownTime","countDownTimeRef","useRef","startTime","setStartTime","setIsRunning","lapStarted","setLapStarted","setLapStartTime","setLapsList","showLapsModal","setShowLapsModal","useEffect","interval","newCountDownTime","setInterval","clearInterval","beforeUnload","current","getItem","countDownTimeFromLastSession","isRunningFromLastSession","Number","window","addEventListener","removeEventListener","preventDuplicate","setIsRunningInLocalStorage","totalLaps","lastLap","lastLapIndex","lastLapStartTime","splice","push","miliSeconds","round","state","isDisabled","handleKeys","onKeyEvent","currentLapIndex","handleKeyDownEvent","position","bgcolor","top","zIndex","py","ml","mt","IconButton","classes","root","listItem","icon","Instructions","List","ListItem","ListItemIcon","ListItemText","App","openInstructions","setOpenInstructions","toggleOpenInstructions","style","muiTheme","createMuiTheme","primary","light","main","dark","secondary","background","default","props","MuiAppBar","elevation","MuiTabs","MuiTab","disableRipple","overrides","colorPrimary","textTransform","typography","subtitle2","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","Boolean","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","maxSnack","anchorOrigin","vertical","horizontal","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40d1b4de.chunk.js","sourcesContent":["export const getPaddedNumberWithZero = ({ number, paddedNumber }) => {\n  return String(number).padStart(paddedNumber, '0');\n};\n\nexport const formatTime = time => {\n  const hours = getPaddedNumberWithZero({\n    number: Math.floor(time / 3600000),\n    paddedNumber: 2,\n  });\n  const minutes = getPaddedNumberWithZero({\n    number: Math.floor(time / 60000) % 60,\n    paddedNumber: 2,\n  });\n  const seconds = getPaddedNumberWithZero({\n    number: Math.floor(time / 1000) % 60,\n    paddedNumber: 2,\n  });\n  const miliseconds = getPaddedNumberWithZero({\n    number: Math.floor(time / 10) % 100,\n    paddedNumber: 3,\n  });\n  return `${hours} : ${minutes} : ${seconds} : ${miliseconds}`;\n};\n\nexport const setTimeInLocalStorage = time => {\n  localStorage.setItem('countDownTime', time);\n};\n\nexport const setIsRunningInLocalStorage = isRunning => {\n  localStorage.setItem('isRunning', isRunning);\n};\n\nexport const getTimeFromLocalStoreage = () => {\n  const countDownTime = localStorage.getItem('countDownTime');\n  const isRunning = localStorage.getItem('isRunning');\n  return { countDownTime, isRunning };\n};\n","import React, { useMemo } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\nimport { getPaddedNumberWithZero } from 'utils/helper';\n\nfunction CountDownColumn({\n  countDownTime,\n  columnType,\n  onChangeCountDownTime,\n  isRunning,\n}) {\n  const value = useMemo(() => {\n    switch (columnType) {\n      case 'hours':\n        return getPaddedNumberWithZero({\n          number: Math.floor((countDownTime / 1000 / 60 / 60) % 24),\n          paddedNumber: 2,\n        });\n      case 'minutes':\n        return getPaddedNumberWithZero({\n          number: Math.floor((countDownTime / 1000 / 60) % 60),\n          paddedNumber: 2,\n        });\n      case 'seconds':\n        return getPaddedNumberWithZero({\n          number: Math.floor((countDownTime / 1000) % 60) % 60,\n          paddedNumber: 2,\n        });\n      default:\n    }\n  }, [columnType, countDownTime]);\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      minWidth={100}\n      m={2}\n    >\n      <Box my={1}>\n        <Typography variant=\"caption\">\n          {columnType.charAt(0).toUpperCase() + columnType.slice(1)}\n        </Typography>\n      </Box>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={isRunning}\n        onClick={() =>\n          onChangeCountDownTime({ columnType, changeType: 'increment' })\n        }\n      >\n        <ArrowUpwardIcon fontSize=\"large\" />\n      </Button>\n      <Box display=\"flex\" justifyContent=\"center\" minWidth={80} my={1}>\n        <Typography variant=\"h2\">{value}</Typography>\n      </Box>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={isRunning}\n        onClick={() =>\n          onChangeCountDownTime({ columnType, changeType: 'decrement' })\n        }\n      >\n        <ArrowDownwardIcon fontSize=\"large\" />\n      </Button>\n    </Box>\n  );\n}\n\nexport default CountDownColumn;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { formatTime } from 'utils/helper';\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    minWidth: 900,\n  },\n  tableContainer: {\n    maxHeight: 440,\n  },\n  tableHeader: {\n    fontWeight: 500,\n  },\n  tableCellHead: {\n    backgroundColor: theme.palette.grey[300],\n  },\n  tableFooter: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  tableRow: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}));\n\nfunction LapsModalTable({ laps, showPagination = false }) {\n  const styles = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const lapsList = showPagination\n    ? laps.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n    : laps;\n  function handleChangePage(_, newPage) {\n    setPage(newPage);\n  }\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  }\n  return (\n    <Paper className={styles.paper}>\n      <TableContainer className={showPagination ? styles.tableContainer : {}}>\n        <Table stickyHeader>\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" className={styles.tableCellHead}>\n                <Typography variant=\"subtitle2\" className={styles.tableHeader}>\n                  No.\n                </Typography>\n              </TableCell>\n              <TableCell align=\"center\" className={styles.tableCellHead}>\n                <Typography variant=\"subtitle2\" className={styles.tableHeader}>\n                  Start Time\n                </Typography>\n              </TableCell>\n              <TableCell align=\"center\" className={styles.tableCellHead}>\n                <Typography variant=\"subtitle2\" className={styles.tableHeader}>\n                  End Time\n                </Typography>\n              </TableCell>\n              <TableCell align=\"center\" className={styles.tableCellHead}>\n                <Typography variant=\"subtitle2\" className={styles.tableHeader}>\n                  Duration\n                </Typography>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {!isEmpty(laps) &&\n              lapsList.map(lap => {\n                const { index, lapStartTime, lapEndTime, lapDuration } =\n                  lap || {};\n                return (\n                  <TableRow key={index} className={styles.tableRow}>\n                    <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                      <Typography variant=\"subtitle2\">\n                        <strong>{index}</strong>\n                      </Typography>\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      <Typography variant=\"subtitle2\" color=\"primary\">\n                        {formatTime(lapStartTime)}\n                      </Typography>\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      <Typography variant=\"subtitle2\" color=\"primary\">\n                        {isNaN(lapEndTime) ? 'Running' : formatTime(lapEndTime)}\n                      </Typography>\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      <Typography variant=\"subtitle2\" color=\"primary\">\n                        {isNaN(lapDuration)\n                          ? 'Running'\n                          : formatTime(lapDuration)}\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {showPagination && (\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25, 100]}\n          component=\"div\"\n          count={laps.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      )}\n    </Paper>\n  );\n}\n\nLapsModalTable.propTypes = {\n  laps: PropTypes.array,\n};\n\nexport default LapsModalTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\n\nimport LapsModalTable from './Table';\n\nfunction LapsModal({ laps, open, handleClose }) {\n  return (\n    <Dialog maxWidth=\"lg\" onClose={handleClose} open={open}>\n      <DialogTitle onClose={handleClose}>Laps Recorded</DialogTitle>\n      <DialogContent dividers>\n        {isEmpty(laps) ? (\n          <Box minWidth={500} display=\"flex\" justifyContent=\"center\">\n            <Typography>No Laps Recorded</Typography>\n          </Box>\n        ) : (\n          <LapsModalTable laps={laps} showPagination />\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Box mx={2}>\n          <Button\n            size=\"large\"\n            variant=\"outlined\"\n            onClick={handleClose}\n            color=\"primary\"\n          >\n            Ok\n          </Button>\n        </Box>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nLapsModal.propTypes = {\n  laps: PropTypes.array,\n  open: PropTypes.bool,\n  handleClose: PropTypes.func,\n};\n\nexport default LapsModal;\n","export const THEME_COLORS = {\n  PRIMARY_LIGHT: '#3D9EFF',\n  PRIMARY: '#5C7393',\n  PRIMARY_DARK: '#364C63',\n  SECONDARY: '#FF811D',\n  BACKGROUND_COLOR: '#F0F2F3',\n  BACKGROUND_WHITE: '#FFFFFF',\n  NOTE_TEXT_GRAY: '#909DA9',\n  MAIN_NAV_BUTTON: '#161E29',\n  ACTIVE: '#009A5B',\n  INACTIVE: '#B1876A',\n  BLACK: '#000000',\n};\n","import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport isEmpty from 'lodash/isEmpty';\nimport makeStyles from '@material-ui/styles/makeStyles';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\nimport StopIcon from '@material-ui/icons/Stop';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport CountDownColumn from 'components/CountDown/Column';\nimport LapsModal from 'components/LapsModal';\nimport LapsModalTable from 'components/LapsModal/Table';\nimport {\n  getPaddedNumberWithZero,\n  setTimeInLocalStorage,\n  setIsRunningInLocalStorage,\n  getTimeFromLocalStoreage,\n} from 'utils/helper';\nimport * as globalConstants from 'utils/constants';\n\nconst { THEME_COLORS } = globalConstants;\n\nconst useStyles = makeStyles(theme => ({\n  gridItemRoot: {\n    padding: theme.spacing(1),\n  },\n  iconRoot: {\n    fontSize: 50,\n  },\n  '@keyframes blink': {\n    from: { opacity: 1 },\n    to: { opacity: 0 },\n  },\n}));\n\nconst lapThreshold = 60000;\n\nfunction CountDown() {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const [countDownTime, setCountDownTime] = useState(0);\n  const countDownTimeRef = useRef();\n  const [startTime, setStartTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [lapStarted, setLapStarted] = useState(false);\n  const [lapStartTime, setLapStartTime] = useState(0);\n  const [lapsList, setLapsList] = useState([]);\n  const [showLapsModal, setShowLapsModal] = useState(false);\n  const styles = useStyles({ isRunning });\n  useEffect(() => {\n    let interval;\n    if (isRunning) {\n      const newCountDownTime = countDownTime - 100;\n      interval = setInterval(() => {\n        setCountDownTime(newCountDownTime);\n      }, 100);\n    }\n    return () => clearInterval(interval);\n  });\n\n  // getting the stored state of the timer from localstorage\n  useEffect(() => {\n    const beforeUnload = () => {\n      setTimeInLocalStorage(countDownTimeRef.current);\n    };\n    const {\n      countDownTime: countDownTimeFromLastSession,\n      isRunning: isRunningFromLastSession,\n    } = getTimeFromLocalStoreage();\n    if (countDownTimeFromLastSession) {\n      setCountDownTime(Number(countDownTimeFromLastSession));\n      setStartTime(Number(countDownTimeFromLastSession));\n      setIsRunning(isRunningFromLastSession === 'true' ? true : false);\n    }\n    window.addEventListener('beforeunload', beforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', beforeUnload);\n    };\n  }, []);\n\n  useEffect(() => {\n    countDownTimeRef.current = countDownTime;\n    const currentLapDuration = lapStartTime - countDownTime;\n    if (isRunning && currentLapDuration >= lapThreshold) {\n      enqueueSnackbar('1 Minute Lap threshold reached', {\n        variant: 'warning',\n        preventDuplicate: true,\n        action,\n      });\n    }\n  }, [countDownTime]);\n\n  const action = key => (\n    <Button\n      onClick={() => {\n        closeSnackbar(key);\n      }}\n    >\n      Ok\n    </Button>\n  );\n\n  useEffect(() => {\n    setIsRunningInLocalStorage(isRunning);\n  }, [isRunning]);\n\n  useEffect(() => {\n    if (lapStarted) {\n      const totalLaps = lapsList.length || 0;\n      const lastLap = !isEmpty(lapsList) ? lapsList[lapsList.length - 1] : {};\n      const { index: lastLapIndex, lapStartTime: lastLapStartTime } =\n        lastLap || {};\n      const lapDuration = lastLapStartTime - countDownTime;\n      if (!isEmpty(lastLap)) {\n        lapsList.splice(lastLapIndex - 1, 1);\n        lapsList.splice(lastLapIndex - 1, 0, {\n          lapDuration,\n          lapStartTime: lastLapStartTime,\n          lapEndTime: countDownTime,\n          index: lastLapIndex,\n        });\n      }\n      lapsList.push({\n        index: totalLaps + 1,\n        lapStartTime: countDownTime,\n        lapDuration: 'Running',\n        lapEndTime: 'Running',\n      });\n      setLapsList(lapsList);\n      if (totalLaps > 0) {\n        enqueueSnackbar(\n          `Lap ${totalLaps} Ended, Starting Lap ${totalLaps + 1}`,\n          {\n            variant: 'info',\n            preventDuplicate: true,\n          },\n        );\n      } else {\n        enqueueSnackbar(`Lap ${totalLaps + 1} Started`, {\n          variant: 'info',\n          preventDuplicate: true,\n        });\n      }\n      setLapStarted(false);\n    }\n  }, [lapStarted]);\n\n  const miliSeconds = useMemo(() => {\n    return getPaddedNumberWithZero({\n      number: countDownTime % 1000,\n      paddedNumber: 3,\n    });\n  }, [countDownTime]);\n\n  function showLapsTable() {\n    if (!isEmpty(lapsList)) {\n      return true;\n    }\n    return false;\n  }\n\n  function onChangeCountDownTime({ columnType, changeType }) {\n    const time = Math.round(Number(countDownTime));\n    if (changeType === 'increment') {\n      if (columnType === 'hours' && time + 3600000 < 216000000) {\n        setCountDownTime(state => state + 3600000);\n      } else if (columnType === 'minutes' && time + 60000 < 216000000) {\n        setCountDownTime(state => state + 60000);\n      } else if (columnType === 'seconds' && time + 1000 < 216000000) {\n        setCountDownTime(state => state + 1000);\n      }\n    } else if (changeType === 'decrement') {\n      if (columnType === 'hours' && time - 3600000 >= 0) {\n        setCountDownTime(state => state - 3600000);\n      } else if (columnType === 'minutes' && time - 60000 >= 0) {\n        setCountDownTime(state => state - 60000);\n      } else if (columnType === 'seconds' && time - 1000 >= 0) {\n        setCountDownTime(state => state - 1000);\n      }\n    }\n  }\n\n  function onStart() {\n    setStartTime(countDownTime);\n    setIsRunning(true);\n  }\n\n  function onPause() {\n    if (isRunning) {\n      setStartTime(countDownTime);\n      setCountDownTime(countDownTime);\n      setIsRunning(false);\n    }\n  }\n\n  function onResume() {\n    setStartTime(countDownTime);\n    setIsRunning(true);\n  }\n\n  function onReset() {\n    setCountDownTime(0);\n    setStartTime(0);\n    setIsRunning(false);\n    setTimeInLocalStorage(0);\n    setLapsList([]);\n  }\n\n  function onStop() {\n    setCountDownTime(0);\n    setStartTime(0);\n    setIsRunning(false);\n    setShowLapsModal(true);\n    setTimeInLocalStorage(0);\n    // setting the time for the last lap\n    const lastLap = !isEmpty(lapsList) ? lapsList[lapsList.length - 1] : {};\n    const { index: lastLapIndex, lapStartTime: lastLapStartTime } =\n      lastLap || {};\n    const lapDuration = lastLapStartTime - countDownTime;\n    if (!isEmpty(lastLap)) {\n      lapsList.splice(lastLapIndex - 1, 1);\n      lapsList.splice(lastLapIndex - 1, 0, {\n        lapDuration,\n        lapStartTime: lastLapStartTime,\n        lapEndTime: countDownTime,\n        index: lastLapIndex,\n      });\n    }\n  }\n\n  function handleKeyDownEvent({ key }) {\n    if (key === 'space') {\n      setLapStarted(true);\n      setLapStartTime(countDownTimeRef.current);\n    } else if (key === 'backspace' && !isEmpty(lapsList)) {\n      if (lapsList.length === 1) {\n        enqueueSnackbar(`Deleting Lap ${lapsList.length}`, {\n          variant: 'success',\n          preventDuplicate: true,\n        });\n        setLapsList([]);\n      } else {\n        enqueueSnackbar(\n          `Deleting Lap ${lapsList.length}, Continuing Lap ${\n            lapsList.length - 1\n          }`,\n          {\n            variant: 'success',\n            preventDuplicate: true,\n          },\n        );\n        const lastLap = lapsList[lapsList.length - 2];\n        const currentLap = lapsList[lapsList.length - 1];\n        const { index: currentLapIndex } = currentLap || {};\n        const { index: lastLapIndex, lapStartTime } = lastLap || {};\n        lapsList.splice(lastLapIndex - 1, 1);\n        lapsList.splice(lastLapIndex - 1, 0, {\n          index: lastLapIndex,\n          lapStartTime,\n          lapEndTime: 'Running',\n          lapDuration: 'Running',\n        });\n        lapsList.splice(currentLapIndex - 1, 1);\n        setLapsList(lapsList);\n      }\n    }\n  }\n  function toggleShowLapsModal() {\n    setShowLapsModal(state => !state);\n    setLapsList([]);\n  }\n  return (\n    <>\n      <KeyboardEventHandler\n        isDisabled={!isRunning}\n        handleKeys={['backspace', 'space']}\n        onKeyEvent={(key, event) => handleKeyDownEvent({ key, event })}\n      />\n      <Box\n        position=\"sticky\"\n        bgcolor={THEME_COLORS.BACKGROUND_WHITE}\n        width={1}\n        top={10}\n        zIndex={100}\n        py={2}\n      >\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          my={2}\n          ml={9}\n        >\n          <CountDownColumn\n            countDownTime={countDownTime}\n            columnType=\"hours\"\n            onChangeCountDownTime={onChangeCountDownTime}\n            isRunning={isRunning}\n          />\n          <Box mt={3}>\n            <Typography variant=\"h3\">:</Typography>\n          </Box>\n          <CountDownColumn\n            countDownTime={countDownTime}\n            columnType=\"minutes\"\n            onChangeCountDownTime={onChangeCountDownTime}\n            isRunning={isRunning}\n          />\n          <Box mt={3}>\n            <Typography variant=\"h3\">:</Typography>\n          </Box>\n          <CountDownColumn\n            countDownTime={countDownTime}\n            columnType=\"seconds\"\n            onChangeCountDownTime={onChangeCountDownTime}\n            isRunning={isRunning}\n          />\n          <Box minWidth={70} mt={5}>\n            <Typography variant=\"caption\">miliseconds</Typography>\n            <Typography variant=\"h5\">. {miliSeconds}</Typography>\n          </Box>\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" my={2}>\n          {!isRunning && countDownTime > 0 && countDownTime !== startTime && (\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <IconButton color=\"primary\" onClick={onStart}>\n                <PlayCircleFilledIcon\n                  fontSize=\"large\"\n                  classes={{ root: styles.iconRoot }}\n                />\n              </IconButton>\n              <Typography variant=\"subtitle2\">Start</Typography>\n            </Box>\n          )}\n          {isRunning && (\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <IconButton color=\"primary\" onClick={onPause}>\n                <PauseCircleFilledIcon\n                  fontSize=\"large\"\n                  classes={{ root: styles.iconRoot }}\n                />\n              </IconButton>\n              <Typography variant=\"subtitle2\">Pause</Typography>\n            </Box>\n          )}\n          {!isRunning && countDownTime > 0 && countDownTime === startTime && (\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <IconButton color=\"primary\" onClick={onResume}>\n                <PlayCircleFilledIcon\n                  fontSize=\"large\"\n                  classes={{ root: styles.iconRoot }}\n                />\n              </IconButton>\n              <Typography variant=\"subtitle2\">Resume</Typography>\n            </Box>\n          )}\n          {isRunning && (\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <IconButton color=\"primary\" onClick={onStop}>\n                <StopIcon\n                  fontSize=\"large\"\n                  classes={{ root: styles.iconRoot }}\n                />\n              </IconButton>\n              <Typography variant=\"subtitle2\">Stop</Typography>\n            </Box>\n          )}\n          {!isRunning && countDownTime > 0 && (\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <IconButton color=\"primary\" onClick={onReset}>\n                <DeleteIcon\n                  fontSize=\"large\"\n                  classes={{ root: styles.iconRoot }}\n                />\n              </IconButton>\n              <Typography variant=\"subtitle2\">Reset</Typography>\n            </Box>\n          )}\n        </Box>\n        {isRunning && (\n          <Typography align=\"center\" variant=\"body1\">\n            Press Space Bar to record Laps\n          </Typography>\n        )}\n      </Box>\n      {showLapsTable() && (\n        <Box my={2}>\n          <LapsModalTable laps={lapsList} />\n        </Box>\n      )}\n      {showLapsModal && (\n        <LapsModal\n          open={showLapsModal}\n          handleClose={toggleShowLapsModal}\n          laps={lapsList}\n        />\n      )}\n    </>\n  );\n}\n\nexport default CountDown;\n","import React from 'react';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport { THEME_COLORS } from 'utils/constants';\n\nconst useStyles = makeStyles(() => ({\n  listItem: {\n    alignItems: 'baseline',\n  },\n  icon: {\n    color: THEME_COLORS.BLACK,\n    minWidth: 25,\n  },\n}));\n\nfunction Instructions({ open, handleClose }) {\n  const styles = useStyles();\n  return (\n    <Dialog open={open} maxWidth=\"sm\">\n      <DialogTitle>Instructions For Recording Laps:</DialogTitle>\n      <DialogContent dividers>\n        <List>\n          <ListItem className={styles.listItem}>\n            <ListItemIcon className={styles.icon}>&#9642;</ListItemIcon>\n            <ListItemText>\n              <Typography align=\"justify\">\n                You can record a Lap by pressing <strong>Space Bar</strong> key\n                on the keyboard while the countdown timer is running.\n              </Typography>\n            </ListItemText>\n          </ListItem>\n          <ListItem className={styles.listItem}>\n            <ListItemIcon className={styles.icon}>&#9642;</ListItemIcon>\n            <ListItemText>\n              <Typography align=\"justify\">\n                If you pressed <strong>Space Bar</strong> by mistake while a lap\n                is running then you can press <strong>Back Space</strong> key to\n                correct that lap and your last lap will continue from there.\n              </Typography>\n            </ListItemText>\n          </ListItem>\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Box mx={2}>\n          <Button\n            size=\"large\"\n            variant=\"outlined\"\n            onClick={handleClose}\n            color=\"primary\"\n          >\n            Got It\n          </Button>\n        </Box>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default Instructions;\n","import React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\n\nimport CountDown from 'containers/CountDown';\nimport Instructions from 'components/Instructions';\n\nfunction App() {\n  const [openInstructions, setOpenInstructions] = useState(false);\n  function toggleOpenInstructions() {\n    setOpenInstructions(state => !state);\n  }\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      my={4}\n    >\n      <Typography variant=\"h2\" color=\"primary\" style={{ fontWeight: 500 }}>\n        Countdown Timer\n      </Typography>\n      <IconButton onClick={toggleOpenInstructions}>\n        <InfoOutlinedIcon fontSize=\"large\" />\n      </IconButton>\n      {openInstructions && (\n        <Instructions\n          open={openInstructions}\n          handleClose={toggleOpenInstructions}\n        />\n      )}\n      <CountDown />\n    </Box>\n  );\n}\n\nexport default App;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nimport * as globalConstants from './constants';\n\nconst { THEME_COLORS } = globalConstants;\n\nconst muiTheme = createMuiTheme({\n  palette: {\n    primary: {\n      light: THEME_COLORS.PRIMARY_LIGHT,\n      main: THEME_COLORS.PRIMARY,\n      dark: THEME_COLORS.PRIMARY_DARK,\n    },\n    secondary: {\n      main: THEME_COLORS.SECONDARY,\n    },\n    background: { default: THEME_COLORS.BACKGROUND_COLOR },\n  },\n  props: {\n    MuiAppBar: { elevation: 0 },\n    MuiTabs: { variant: 'fullWidth' },\n    MuiTab: { disableRipple: true },\n  },\n  overrides: {\n    MuiAppBar: { colorPrimary: { backgroundColor: THEME_COLORS.PRIMARY_DARK } },\n    MuiTab: { root: { textTransform: 'none', fontWeight: 'normal' } },\n  },\n  typography: {\n    subtitle2: { fontSize: '1rem' },\n    fontFamily: \"'Montserrat','Roboto',sans-serif\",\n    fontWeightLight: 300,\n    fontWeightRegular: 400,\n    fontWeightMedium: 500,\n    fontWeightBold: 600,\n  },\n});\n\nexport default muiTheme;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SnackbarProvider } from 'notistack';\nimport ThemeProvider from '@material-ui/styles/ThemeProvider';\n\nimport App from './App';\nimport theme from 'utils/theme';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <SnackbarProvider\n        maxSnack={1}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n      >\n        <App />\n      </SnackbarProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}