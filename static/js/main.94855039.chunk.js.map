{"version":3,"sources":["utils/helper.js","components/CountDown/Column.js","components/LapsModal/index.js","components/Threshold/index.js","containers/CountDown/index.js","utils/constants.js","components/Instructions/index.js","App.js","utils/theme.js","serviceWorker.js","index.js"],"names":["getPaddedNumberWithZero","number","paddedNumber","String","padStart","formatTime","time","hours","Math","floor","minutes","seconds","miliseconds","CountDownColumn","countDownTime","columnType","onChangeCountDownTime","isRunning","value","useMemo","Box","display","flexDirection","justifyContent","alignItems","minWidth","m","my","Typography","variant","charAt","toUpperCase","slice","Button","color","disabled","onClick","changeType","fontSize","useStyles","makeStyles","theme","paper","tableContainer","maxHeight","tableHeader","fontWeight","tableCellHead","backgroundColor","palette","grey","tableFooter","width","tableRow","action","hover","LapsModal","laps","open","handleClose","styles","useState","page","setPage","rowsPerPage","setRowsPerPage","Dialog","maxWidth","onClose","DialogTitle","DialogContent","dividers","Paper","className","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","isEmpty","map","lap","index","lapStartTime","lapEndTime","lapDuration","key","component","scope","TablePagination","rowsPerPageOptions","count","length","onChangePage","newPage","onChangeRowsPerPage","event","target","DialogActions","mx","size","ThresholdWarning","gridItemRoot","padding","spacing","iconRoot","from","opacity","to","CountDown","setCountDownTime","startTime","setStartTime","setIsRunning","lapStarted","setLapStarted","setLapStartTime","setLapEndTime","lapsList","setLapsList","showLaps","setShowLaps","showLapThresholdWarning","setShowLapThresholdWarning","useEffect","interval","newCountDownTime","setInterval","clearInterval","localStorage","getItem","countDownTimeFromLastSession","isRunningFromLastSession","toggleShowLapThresholdWarning","setItem","setIsRunningInLocalStorage","totalLaps","state","miliSeconds","round","isDisabled","handleKeys","onKeyEvent","lastLapIndex","lastLapStartTime","splice","handleKeyDownEvent","mt","mr","IconButton","classes","root","Threshold","THEME_COLORS","PRIMARY_LIGHT","PRIMARY","PRIMARY_DARK","SECONDARY","BACKGROUND_COLOR","BACKGROUND_WHITE","NOTE_TEXT_GRAY","MAIN_NAV_BUTTON","ACTIVE","INACTIVE","BLACK","listItem","icon","Instructions","List","ListItem","ListItemIcon","ListItemText","App","openInstructions","setOpenInstructions","toggleOpenInstructions","style","globalConstants","muiTheme","createMuiTheme","primary","light","main","dark","secondary","background","default","props","MuiAppBar","elevation","MuiTabs","MuiTab","disableRipple","overrides","colorPrimary","textTransform","typography","subtitle2","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94855039.chunk.js","sourcesContent":["export const getPaddedNumberWithZero = ({ number, paddedNumber }) => {\n  return String(number).padStart(paddedNumber, '0');\n};\n\nexport const formatTime = time => {\n  const hours = getPaddedNumberWithZero({\n    number: Math.floor(time / 3600000),\n    paddedNumber: 2,\n  });\n  const minutes = getPaddedNumberWithZero({\n    number: Math.floor(time / 60000) % 60,\n    paddedNumber: 2,\n  });\n  const seconds = getPaddedNumberWithZero({\n    number: Math.floor(time / 1000) % 60,\n    paddedNumber: 2,\n  });\n  const miliseconds = getPaddedNumberWithZero({\n    number: Math.floor(time / 10) % 100,\n    paddedNumber: 3,\n  });\n  return `${hours} : ${minutes} : ${seconds} : ${miliseconds}`;\n};\n\nexport const setTimeInLocalStorage = time => {\n  localStorage.setItem('countDownTime', time);\n};\n\nexport const setIsRunningInLocalStorage = isRunning => {\n  localStorage.setItem('isRunning', isRunning);\n};\n\nexport const getTimeFromLocalStoreage = () => {\n  const countDownTime = localStorage.getItem('countDownTime');\n  const isRunning = localStorage.getItem('isRunning');\n  return { countDownTime, isRunning };\n};\n","import React, { useMemo } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\nimport { getPaddedNumberWithZero } from 'utils/helper';\n\nfunction CountDownColumn({\n  countDownTime,\n  columnType,\n  onChangeCountDownTime,\n  isRunning,\n}) {\n  const value = useMemo(() => {\n    switch (columnType) {\n      case 'hours':\n        return getPaddedNumberWithZero({\n          number: Math.floor((countDownTime / 3600000) % 60),\n          paddedNumber: 2,\n        });\n      case 'minutes':\n        return getPaddedNumberWithZero({\n          number: Math.floor((countDownTime / 60000) % 60),\n          paddedNumber: 2,\n        });\n      case 'seconds':\n        return getPaddedNumberWithZero({\n          number: Math.floor((countDownTime / 1000) % 60) % 60,\n          paddedNumber: 2,\n        });\n      default:\n    }\n  }, [columnType, countDownTime]);\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      minWidth={100}\n      m={2}\n    >\n      <Box my={1}>\n        <Typography variant=\"caption\">\n          {columnType.charAt(0).toUpperCase() + columnType.slice(1)}\n        </Typography>\n      </Box>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={isRunning}\n        onClick={() =>\n          onChangeCountDownTime({ columnType, changeType: 'increment' })\n        }\n      >\n        <ArrowUpwardIcon fontSize=\"large\" />\n      </Button>\n      <Box display=\"flex\" justifyContent=\"center\" minWidth={80} my={1}>\n        <Typography variant=\"h2\">{value}</Typography>\n      </Box>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={isRunning}\n        onClick={() =>\n          onChangeCountDownTime({ columnType, changeType: 'decrement' })\n        }\n      >\n        <ArrowDownwardIcon fontSize=\"large\" />\n      </Button>\n    </Box>\n  );\n}\n\nexport default CountDownColumn;\n","import React, { useState } from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\n\nimport { formatTime } from 'utils/helper';\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    minWidth: 900,\n  },\n  tableContainer: {\n    maxHeight: 440,\n  },\n  tableHeader: {\n    fontWeight: 500,\n  },\n  tableCellHead: {\n    backgroundColor: theme.palette.grey[300],\n  },\n  tableFooter: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  tableRow: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}));\n\nfunction LapsModal({ laps, open, handleClose }) {\n  const styles = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  function handleChangePage(newPage) {\n    setPage(newPage);\n  }\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  }\n  return (\n    <Dialog maxWidth=\"lg\" onClose={handleClose} open={open}>\n      <DialogTitle onClose={handleClose}>Laps Recorded</DialogTitle>\n      <DialogContent dividers>\n        <Paper className={styles.paper}>\n          <TableContainer className={styles.tableContainer}>\n            <Table stickyHeader>\n              <TableHead>\n                <TableRow>\n                  <TableCell align=\"center\" className={styles.tableCellHead}>\n                    <Typography\n                      variant=\"subtitle2\"\n                      className={styles.tableHeader}\n                    >\n                      Lap No.\n                    </Typography>\n                  </TableCell>\n                  <TableCell align=\"center\" className={styles.tableCellHead}>\n                    <Typography\n                      variant=\"subtitle2\"\n                      className={styles.tableHeader}\n                    >\n                      Lap Start Time\n                    </Typography>\n                  </TableCell>\n                  <TableCell align=\"center\" className={styles.tableCellHead}>\n                    <Typography\n                      variant=\"subtitle2\"\n                      className={styles.tableHeader}\n                    >\n                      Lap End Time\n                    </Typography>\n                  </TableCell>\n                  <TableCell align=\"center\" className={styles.tableCellHead}>\n                    <Typography\n                      variant=\"subtitle2\"\n                      className={styles.tableHeader}\n                    >\n                      Lap Duration\n                    </Typography>\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {!isEmpty(laps) &&\n                  laps\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map(lap => {\n                      const { index, lapStartTime, lapEndTime, lapDuration } =\n                        lap || {};\n                      return (\n                        <TableRow key={index} className={styles.tableRow}>\n                          <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                            <Typography variant=\"subtitle2\">\n                              <strong>{index}</strong>\n                            </Typography>\n                          </TableCell>\n                          <TableCell align=\"center\">\n                            <Typography variant=\"subtitle2\">\n                              {formatTime(lapStartTime)}\n                            </Typography>\n                          </TableCell>\n                          <TableCell align=\"center\">\n                            <Typography variant=\"subtitle2\">\n                              {formatTime(lapEndTime)}\n                            </Typography>\n                          </TableCell>\n                          <TableCell align=\"center\">\n                            <Typography variant=\"subtitle2\">\n                              {formatTime(lapDuration)}\n                            </Typography>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25, 100]}\n            component=\"div\"\n            count={laps.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n          />\n        </Paper>\n      </DialogContent>\n      <DialogActions>\n        <Box mx={2}>\n          <Button\n            size=\"large\"\n            variant=\"outlined\"\n            onClick={handleClose}\n            color=\"primary\"\n          >\n            Ok\n          </Button>\n        </Box>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default LapsModal;\n","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nfunction ThresholdWarning({ open, handleClose }) {\n  return (\n    <Dialog open={open} maxWidth=\"sm\">\n      <DialogTitle>Warning</DialogTitle>\n      <DialogContent dividers>\n        <Typography align=\"justify\">\n          Current Lap has reached a threshold of <strong>1 minute</strong>.\n        </Typography>\n      </DialogContent>\n      <DialogActions>\n        <Box mx={2}>\n          <Button\n            size=\"large\"\n            variant=\"outlined\"\n            onClick={handleClose}\n            color=\"primary\"\n          >\n            Got It\n          </Button>\n        </Box>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default ThresholdWarning;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport isEmpty from 'lodash/isEmpty';\nimport makeStyles from '@material-ui/styles/makeStyles';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\nimport StopIcon from '@material-ui/icons/Stop';\n\nimport CountDownColumn from 'components/CountDown/Column';\nimport LapsModal from 'components/LapsModal';\nimport ThresholdWarning from 'components/Threshold';\nimport {\n  getPaddedNumberWithZero,\n  setTimeInLocalStorage,\n  setIsRunningInLocalStorage,\n  getTimeFromLocalStoreage,\n} from 'utils/helper';\n\nconst useStyles = makeStyles(theme => ({\n  gridItemRoot: {\n    padding: theme.spacing(1),\n  },\n  iconRoot: {\n    fontSize: 50,\n  },\n  '@keyframes blink': {\n    from: { opacity: 1 },\n    to: { opacity: 0 },\n  },\n}));\n\nconst lapThreshold = 60000;\n\nfunction CountDown() {\n  const [countDownTime, setCountDownTime] = useState(0);\n  const [startTime, setStartTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [lapStarted, setLapStarted] = useState(false);\n  const [lapStartTime, setLapStartTime] = useState(0);\n  const [lapEndTime, setLapEndTime] = useState(0);\n  const [lapsList, setLapsList] = useState([]);\n  const [showLaps, setShowLaps] = useState(false);\n  const [showLapThresholdWarning, setShowLapThresholdWarning] = useState(false);\n  const styles = useStyles({ isRunning });\n  // eslint-disable-next-line\n  useEffect(() => {\n    let interval;\n    if (isRunning) {\n      const newCountDownTime = countDownTime - 1000;\n      interval = setInterval(() => {\n        setCountDownTime(newCountDownTime);\n      }, 1000);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  });\n  useEffect(() => {\n    const {\n      countDownTime: countDownTimeFromLastSession,\n      isRunning: isRunningFromLastSession,\n    } = getTimeFromLocalStoreage();\n    if (countDownTimeFromLastSession) {\n      setCountDownTime(countDownTimeFromLastSession);\n      setStartTime(countDownTimeFromLastSession);\n      setIsRunning(isRunningFromLastSession === 'true' ? true : false);\n    }\n  }, []);\n  useEffect(() => {\n    if (isRunning && lapStarted) {\n      const currentLapDration = lapStartTime - countDownTime;\n      if (currentLapDration === lapThreshold) {\n        toggleShowLapThresholdWarning();\n      }\n    } else if (countDownTime) {\n      setTimeInLocalStorage(countDownTime);\n    }\n  }, [countDownTime]);\n  useEffect(() => {\n    setIsRunningInLocalStorage(isRunning);\n  }, [isRunning]);\n  useEffect(() => {\n    if (lapEndTime) {\n      const lapDuration = lapStartTime - lapEndTime;\n      const totalLaps = lapsList.length || 0;\n      setLapsList(state => {\n        if (totalLaps === 0) {\n          return [\n            {\n              lapDuration,\n              lapStartTime,\n              lapEndTime,\n              index: totalLaps + 1,\n            },\n          ];\n        }\n        return [\n          ...state,\n          {\n            lapDuration,\n            lapStartTime,\n            lapEndTime,\n            index: totalLaps + 1,\n          },\n        ];\n      });\n    }\n  }, [lapEndTime]);\n  const miliSeconds = useMemo(() => {\n    return getPaddedNumberWithZero({\n      number: Math.round((countDownTime - Math.floor(countDownTime)) * 1000),\n      paddedNumber: 3,\n    });\n  }, [countDownTime]);\n  function onChangeCountDownTime({ columnType, changeType }) {\n    if (changeType === 'increment') {\n      if (columnType === 'hours' && countDownTime + 3600000 < 216000000) {\n        setCountDownTime(state => state + 3600000);\n      } else if (\n        columnType === 'minutes' &&\n        countDownTime + 60000 < 216000000\n      ) {\n        setCountDownTime(state => state + 60000);\n      } else if (columnType === 'seconds' && countDownTime + 1000 < 216000000) {\n        setCountDownTime(state => state + 1000);\n      }\n    } else if (changeType === 'decrement') {\n      if (columnType === 'hours' && countDownTime - 3600000 >= 0) {\n        setCountDownTime(state => state - 3600000);\n      } else if (columnType === 'minutes' && countDownTime - 60000 >= 0) {\n        setCountDownTime(state => state - 60000);\n      } else if (columnType === 'seconds' && countDownTime - 1000 >= 0) {\n        setCountDownTime(state => state - 1000);\n      }\n    }\n  }\n  function onStart() {\n    setCountDownTime(countDownTime - 1000);\n    setStartTime(countDownTime);\n    setIsRunning(true);\n  }\n  function onPause() {\n    if (isRunning) {\n      setStartTime(countDownTime);\n      setCountDownTime(countDownTime);\n      setIsRunning(false);\n    }\n  }\n  function onResume() {\n    setStartTime(countDownTime);\n    setIsRunning(true);\n  }\n  function onStop() {\n    setCountDownTime(0);\n    setStartTime(0);\n    setIsRunning(false);\n    setShowLaps(true);\n  }\n  function handleKeyDownEvent({ key }) {\n    if (key === 'space') {\n      if (lapStarted) {\n        setLapEndTime(countDownTime);\n        setLapStarted(false);\n      } else {\n        setLapStarted(true);\n        setLapStartTime(countDownTime);\n      }\n    } else if (key === 'backspace' && !lapStarted) {\n      const lastLap = lapsList[lapsList.length - 1];\n      const { index: lastLapIndex, lapStartTime: lastLapStartTime } =\n        lastLap || {};\n      setLapStarted(true);\n      setLapStartTime(lastLapStartTime);\n      lapsList.splice(lastLapIndex - 1, 1);\n    }\n  }\n  function toggleShowLapThresholdWarning() {\n    setShowLapThresholdWarning(state => !state);\n  }\n  function toggleShowLaps() {\n    setShowLaps(state => !state);\n    setLapsList([]);\n  }\n  return (\n    <>\n      <KeyboardEventHandler\n        isDisabled={!isRunning}\n        handleKeys={['backspace', 'space']}\n        onKeyEvent={(key, event) => handleKeyDownEvent({ key, event })}\n      />\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        width={1}\n        my={2}\n      >\n        <CountDownColumn\n          countDownTime={countDownTime}\n          columnType=\"hours\"\n          onChangeCountDownTime={onChangeCountDownTime}\n          isRunning={isRunning}\n        />\n        <Box mt={3}>\n          <Typography variant=\"h3\">:</Typography>\n        </Box>\n        <CountDownColumn\n          countDownTime={countDownTime}\n          columnType=\"minutes\"\n          onChangeCountDownTime={onChangeCountDownTime}\n          isRunning={isRunning}\n        />\n        <Box mt={3}>\n          <Typography variant=\"h3\">:</Typography>\n        </Box>\n        <CountDownColumn\n          countDownTime={countDownTime}\n          columnType=\"seconds\"\n          onChangeCountDownTime={onChangeCountDownTime}\n          isRunning={isRunning}\n        />\n        <Box minWidth={70} mt={5}>\n          <Typography variant=\"caption\">miliseconds</Typography>\n          <Typography variant=\"h5\">. {miliSeconds}</Typography>\n        </Box>\n      </Box>\n      <Box display=\"flex\" justifyContent=\"center\" my={2} mr={6}>\n        {!isRunning && countDownTime > 0 && countDownTime !== startTime && (\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <IconButton color=\"primary\" onClick={onStart}>\n              <PlayCircleFilledIcon\n                fontSize=\"large\"\n                classes={{ root: styles.iconRoot }}\n              />\n            </IconButton>\n            <Typography variant=\"subtitle2\">Start</Typography>\n          </Box>\n        )}\n        {isRunning && (\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <IconButton color=\"primary\" onClick={onPause}>\n              <PauseCircleFilledIcon\n                fontSize=\"large\"\n                classes={{ root: styles.iconRoot }}\n              />\n            </IconButton>\n            <Typography variant=\"subtitle2\">Pause</Typography>\n          </Box>\n        )}\n        {!isRunning && countDownTime > 0 && countDownTime === startTime && (\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <IconButton color=\"primary\" onClick={onResume}>\n              <PlayCircleFilledIcon\n                fontSize=\"large\"\n                classes={{ root: styles.iconRoot }}\n              />\n            </IconButton>\n            <Typography variant=\"subtitle2\">Resume</Typography>\n          </Box>\n        )}\n        {isRunning && (\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <IconButton color=\"primary\" onClick={onStop}>\n              <StopIcon fontSize=\"large\" classes={{ root: styles.iconRoot }} />\n            </IconButton>\n            <Typography variant=\"subtitle2\">Stop</Typography>\n          </Box>\n        )}\n      </Box>\n      {!isRunning && !isEmpty(lapsList) && showLaps && (\n        <LapsModal\n          open={showLaps}\n          handleClose={toggleShowLaps}\n          laps={lapsList}\n        />\n      )}\n      {showLapThresholdWarning && (\n        <ThresholdWarning\n          open={setShowLapThresholdWarning}\n          handleClose={toggleShowLapThresholdWarning}\n        />\n      )}\n    </>\n  );\n}\n\nexport default CountDown;\n","export const THEME_COLORS = {\n  PRIMARY_LIGHT: '#3D9EFF',\n  PRIMARY: '#5C7393',\n  PRIMARY_DARK: '#364C63',\n  SECONDARY: '#FF811D',\n  BACKGROUND_COLOR: '#F0F2F3',\n  BACKGROUND_WHITE: '#FFFFFF',\n  NOTE_TEXT_GRAY: '#909DA9',\n  MAIN_NAV_BUTTON: '#161E29',\n  ACTIVE: '#009A5B',\n  INACTIVE: '#B1876A',\n  BLACK: '#000000',\n};\n","import React from 'react';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport { THEME_COLORS } from 'utils/constants';\n\nconst useStyles = makeStyles(() => ({\n  listItem: {\n    alignItems: 'baseline',\n  },\n  icon: {\n    color: THEME_COLORS.BLACK,\n    minWidth: 25,\n  },\n}));\n\nfunction Instructions({ open, handleClose }) {\n  const styles = useStyles();\n  return (\n    <Dialog open={open} maxWidth=\"sm\">\n      <DialogTitle>Instructions For Recording Laps:</DialogTitle>\n      <DialogContent dividers>\n        <List>\n          <ListItem className={styles.listItem}>\n            <ListItemIcon className={styles.icon}>&#9642;</ListItemIcon>\n            <ListItemText>\n              <Typography align=\"justify\">\n                You can record a Lap by pressing <strong>Space Bar</strong> key\n                on the keyboard while the countdown timer is running.\n              </Typography>\n            </ListItemText>\n          </ListItem>\n          <ListItem className={styles.listItem}>\n            <ListItemIcon className={styles.icon}>&#9642;</ListItemIcon>\n            <ListItemText>\n              <Typography align=\"justify\">\n                If you pressed <strong>Space Bar</strong> while a lap is running\n                then you can press <strong>Back Space</strong> key to correct\n                that lap and your last lap will continue from there.\n              </Typography>\n            </ListItemText>\n          </ListItem>\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Box mx={2}>\n          <Button\n            size=\"large\"\n            variant=\"outlined\"\n            onClick={handleClose}\n            color=\"primary\"\n          >\n            Got It\n          </Button>\n        </Box>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default Instructions;\n","import React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\n\nimport CountDown from 'containers/CountDown';\nimport Instructions from 'components/Instructions';\n\nfunction App() {\n  const [openInstructions, setOpenInstructions] = useState(false);\n  function toggleOpenInstructions() {\n    setOpenInstructions(state => !state);\n  }\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      my={4}\n    >\n      <Typography variant=\"h2\" color=\"primary\" style={{ fontWeight: 500 }}>\n        Countdown Timer\n      </Typography>\n      <IconButton onClick={toggleOpenInstructions}>\n        <InfoOutlinedIcon fontSize=\"large\" />\n      </IconButton>\n      {openInstructions && (\n        <Instructions\n          open={openInstructions}\n          handleClose={toggleOpenInstructions}\n        />\n      )}\n      <CountDown />\n    </Box>\n  );\n}\n\nexport default App;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nimport * as globalConstants from './constants';\n\nconst { THEME_COLORS } = globalConstants;\n\nconst muiTheme = createMuiTheme({\n  palette: {\n    primary: {\n      light: THEME_COLORS.PRIMARY_LIGHT,\n      main: THEME_COLORS.PRIMARY,\n      dark: THEME_COLORS.PRIMARY_DARK,\n    },\n    secondary: {\n      main: THEME_COLORS.SECONDARY,\n    },\n    background: { default: THEME_COLORS.BACKGROUND_COLOR },\n  },\n  props: {\n    MuiAppBar: { elevation: 0 },\n    MuiTabs: { variant: 'fullWidth' },\n    MuiTab: { disableRipple: true },\n  },\n  overrides: {\n    MuiAppBar: { colorPrimary: { backgroundColor: THEME_COLORS.PRIMARY_DARK } },\n    MuiTab: { root: { textTransform: 'none', fontWeight: 'normal' } },\n  },\n  typography: {\n    subtitle2: { fontSize: '1rem' },\n    fontFamily: \"'Montserrat','Roboto',sans-serif\",\n    fontWeightLight: 300,\n    fontWeightRegular: 400,\n    fontWeightMedium: 500,\n    fontWeightBold: 600,\n  },\n});\n\nexport default muiTheme;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ThemeProvider from '@material-ui/styles/ThemeProvider';\n\nimport App from './App';\nimport theme from 'utils/theme';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}